from pathlib import Path
import shutil
import subprocess

{% if 'uv' in component -%}USE_UV = True{% else %}USE_UV = False{%- endif %}
{% if 'sphinx' in component -%}USE_SPHINX = True{% else %}USE_SPHINX = False{%- endif %}
{% if 'sphinx' in component and sphinx_myst %}USE_MYST = True{%else%}USE_MYST = False{% endif %}
{% if 'sphinx' in component and sphinx_readthedoc %}USE_READTHEDOC = True{%else%}USE_READTHEDOC = False{% endif %}
{% if 'pre-commit' in component -%}USE_PRECOMMIT = True{% else %}USE_PRECOMMIT = False{%- endif %}
{% if 'github-actions' in component -%}USE_GITHUB_ACTIONS = True{% else %}USE_GITHUB_ACTIONS = False{%- endif %}
{% if 'click-devtool' in component -%}USE_CLICK = True{% else %}USE_CLICK = False {%- endif %}

def silence_errors(func):
    def wrapped(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except Exception:
            pass
    return wrapped

@silence_errors
def rm(path):
    Path(path).unlink()

@silence_errors
def rmdir(path):
    shutil.rmtree(path)

def post_sphinx():
    requires = ["sphinx", "linkify-it-py"]
    print("Posting process for sphinx component...")
    if USE_MYST: requires += ["myst-parser"]
    subprocess.run(
        ["uv","add","--group","doc", "--no-sync"] + requires,
        #stdout=subprocess.DEVNULL,
        #stderr=subprocess.DEVNULL
    )

if __name__ == '__main__':
    cwd = Path(__file__).parent.parent
    create_dirs = ["doc/source/_static", "doc/source/_templates"]
    for d in create_dirs:
        (cwd / d).mkdir(parents=True,exist_ok=True)
    clean_files = []
    if not USE_UV:
        clean_files += ["pyproject.toml",".python-version"]
    if not USE_SPHINX:
        clean_files += ["doc",".readthedocs.yaml"]
    else:
        if not USE_MYST:
            clean_files += ["doc/source/index.md"]
        else:
            clean_files += ["doc/source/index.rst"]
        if not USE_READTHEDOC:
            clean_files += [".readthedocs.yaml","doc/doc_requirements.txt"]
    if not USE_PRECOMMIT:
        clean_files += [".pre-commit-config.yaml"]
    if not USE_GITHUB_ACTIONS:
        clean_files += [".github"]
    if not USE_CLICK:
        clean_files += ["dev.py"]

    print("Cleaning up temporary files...")
    for f in clean_files:
        to_clean = cwd / f
        print(f"- {to_clean.name}")
        if to_clean.is_dir():
            rmdir(to_clean)
        else:
            rm(to_clean)
    if USE_UV and USE_SPHINX:
        post_sphinx()
        rmdir(cwd / '.venv')
        rm(cwd / 'uv.lock')
    if USE_CLICK:
        subprocess.run(
            ["uv", "add", "--dev", "click", "--no-sync"]
        )
    
    rm(__file__)
    print("Project successful generated!")
